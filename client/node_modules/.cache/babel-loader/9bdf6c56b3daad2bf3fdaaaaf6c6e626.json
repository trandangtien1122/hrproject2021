{"ast":null,"code":"var _jsxFileName = \"/Users/hoangmac/PhpstormProjects/hrproject/client/src/components/covid19.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Container, Grid } from '@material-ui/core';\nimport InffectedCountryList from './Covid19Data/InffectedCountryList';\nimport InffectedCountryMap from './Covid19Data/InffectedCountryMap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CovidMap() {\n  _s();\n\n  let [inffectedCountries, setinffectedCountries] = useState([]);\n  let [updatedAt, setUpdatedAt] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      let inffectedCountriesResponse = await fetch('https://corodMapnavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php', {\n        headers: {\n          'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n          'x-rapidapi-key': 'b977b4931cmshc1242005fd952fep1abf72jsn9013efcf73e7'\n        }\n      });\n      let allCountriesResponse = await fetch('https://restcountries.eu/rest/v2/all');\n      let allCountries = [];\n\n      if (allCountriesResponse.ok) {\n        allCountries = await allCountriesResponse.json();\n      }\n\n      if (inffectedCountriesResponse.ok) {\n        let {\n          countries_stat,\n          statistic_taken_at\n        } = await inffectedCountriesResponse.json();\n        setinffectedCountries(countries_stat.map(stat => {\n          let countryFound = allCountries.find(country => country.name.toUpperCase().indexOf(stat.country_name.toUpperCase()) != -1 || country.altSpellings.findIndex(alt => alt.toUpperCase().indexOf(stat.country_name.toUpperCase()) != -1) != -1);\n          if (!countryFound) countryFound = {};\n          return { ...stat,\n            urlFlag: countryFound.flag,\n            latlng: countryFound.latlng\n          };\n        }));\n        setUpdatedAt(statistic_taken_at);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      style: {\n        height: '100vh',\n        overflowY: 'auto'\n      },\n      lg: 6,\n      sm: 12,\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(InffectedCountryList, {\n        inffectedCountries: inffectedCountries,\n        updatedAt: updatedAt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      style: {\n        height: '100vh'\n      },\n      lg: 6,\n      sm: 12,\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(InffectedCountryMap, {\n        inffectedCountries: inffectedCountries\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CovidMap, \"gLR02PrkmlyITSiAkK7QFvNlbrE=\");\n\n_c = CovidMap;\nexport default CovidMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"CovidMap\");","map":{"version":3,"sources":["/Users/hoangmac/PhpstormProjects/hrproject/client/src/components/covid19.js"],"names":["React","useState","useEffect","Box","Container","Grid","InffectedCountryList","InffectedCountryMap","CovidMap","inffectedCountries","setinffectedCountries","updatedAt","setUpdatedAt","fetchData","inffectedCountriesResponse","fetch","headers","allCountriesResponse","allCountries","ok","json","countries_stat","statistic_taken_at","map","stat","countryFound","find","country","name","toUpperCase","indexOf","country_name","altSpellings","findIndex","alt","urlFlag","flag","latlng","height","overflowY"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Container, Grid } from '@material-ui/core';\n\nimport InffectedCountryList from './Covid19Data/InffectedCountryList';\nimport InffectedCountryMap from './Covid19Data/InffectedCountryMap';\n\nfunction CovidMap() {\n    let [inffectedCountries, setinffectedCountries] = useState([]);\n    let [updatedAt, setUpdatedAt] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            let inffectedCountriesResponse = await fetch(\n                'https://corodMapnavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n                {\n                    headers: {\n                        'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n                        'x-rapidapi-key': 'b977b4931cmshc1242005fd952fep1abf72jsn9013efcf73e7',\n                    },\n                },\n            );\n\n            let allCountriesResponse = await fetch('https://restcountries.eu/rest/v2/all');\n\n            let allCountries = [];\n            if (allCountriesResponse.ok) {\n                allCountries = await allCountriesResponse.json();\n            }\n\n            if (inffectedCountriesResponse.ok) {\n                let { countries_stat, statistic_taken_at } = await inffectedCountriesResponse.json();\n                setinffectedCountries(\n                    countries_stat.map(stat => {\n                        let countryFound = allCountries.find(\n                            country =>\n                                country.name.toUpperCase().indexOf(stat.country_name.toUpperCase()) != -1 ||\n                                country.altSpellings.findIndex(\n                                    alt => alt.toUpperCase().indexOf(stat.country_name.toUpperCase()) != -1,\n                                ) != -1,\n                        );\n                        if (!countryFound) countryFound = {};\n                        return {\n                            ...stat,\n                            urlFlag: countryFound.flag,\n                            latlng: countryFound.latlng,\n                        };\n                    }),\n                );\n\n                setUpdatedAt(statistic_taken_at);\n            }\n        };\n\n        fetchData();\n    }, []);\n\n    return (\n        <Grid container>\n            <Grid style={{ height: '100vh', overflowY: 'auto' }} lg={6} sm={12} item>\n                <InffectedCountryList inffectedCountries={inffectedCountries} updatedAt={updatedAt} />\n            </Grid>\n            <Grid style={{ height: '100vh' }} lg={6} sm={12} item>\n                <InffectedCountryMap inffectedCountries={inffectedCountries} />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default CovidMap;"]},"metadata":{},"sourceType":"module"}